// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartElectionBackend.Data;

namespace SmartElectionBackend.Migrations
{
    [DbContext(typeof(SmartElectionContext))]
    [Migration("20190521020709_Signature")]
    partial class Signature
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SmartElectionBackend.Models.Alternative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ElectionId");

                    b.Property<string>("Info");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.ToTable("Alternatives");
                });

            modelBuilder.Entity("SmartElectionBackend.Models.Ballot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlternativeId");

                    b.Property<string>("CommiteeSignature");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<int>("ElectoralCommiteeId");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeId");

                    b.HasIndex("ElectoralCommiteeId");

                    b.ToTable("Ballots");
                });

            modelBuilder.Entity("SmartElectionBackend.Models.CommiteeAgreement", b =>
                {
                    b.Property<int>("ElectionId");

                    b.Property<int>("ElectoralCommiteeId");

                    b.Property<string>("CommiteeSign");

                    b.HasKey("ElectionId", "ElectoralCommiteeId");

                    b.HasIndex("ElectoralCommiteeId");

                    b.ToTable("CommiteeAgreements");
                });

            modelBuilder.Entity("SmartElectionBackend.Models.Election", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CalculationType");

                    b.Property<DateTimeOffset>("End");

                    b.Property<bool>("NeedsCertificate");

                    b.Property<bool>("NeedsFingerprint");

                    b.Property<DateTimeOffset>("Start");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("SmartElectionBackend.Models.ElectoralCommitee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation");

                    b.Property<string>("Email");

                    b.Property<string>("Location");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("ElectoralCommitees");
                });

            modelBuilder.Entity("SmartElectionBackend.Models.IoT", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectoralCommiteeId");

                    b.Property<string>("Model");

                    b.HasKey("Id");

                    b.HasIndex("ElectoralCommiteeId");

                    b.ToTable("IoTs");
                });

            modelBuilder.Entity("SmartElectionBackend.Models.Turnout", b =>
                {
                    b.Property<int>("ElectionId");

                    b.Property<string>("UserId");

                    b.Property<int>("ElectoralCommiteeId");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<string>("ElectoralCommiteeSignature");

                    b.Property<string>("UserSignature");

                    b.HasKey("ElectionId", "UserId", "ElectoralCommiteeId");

                    b.HasIndex("ElectoralCommiteeId");

                    b.HasIndex("UserId");

                    b.ToTable("Turnouts");
                });

            modelBuilder.Entity("SmartElectionBackend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SmartElectionBackend.Models.UserCertificates", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("ElectoralCommiteeId");

                    b.Property<string>("IssuerName");

                    b.Property<string>("SubjectName");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId")
                        .IsUnique()
                        .HasFilter("[ElectionId] IS NOT NULL");

                    b.HasIndex("ElectoralCommiteeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCertificates");
                });

            modelBuilder.Entity("SmartElectionBackend.Models.UserFingers", b =>
                {
                    b.Property<string>("IoTId");

                    b.Property<string>("UserId");

                    b.Property<int>("Field");

                    b.HasKey("IoTId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFingers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmartElectionBackend.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmartElectionBackend.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartElectionBackend.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmartElectionBackend.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartElectionBackend.Models.Alternative", b =>
                {
                    b.HasOne("SmartElectionBackend.Models.Election", "Election")
                        .WithMany("Alternatives")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartElectionBackend.Models.Ballot", b =>
                {
                    b.HasOne("SmartElectionBackend.Models.Alternative", "Alternative")
                        .WithMany("Ballots")
                        .HasForeignKey("AlternativeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartElectionBackend.Models.ElectoralCommitee", "ElectoralCommitee")
                        .WithMany()
                        .HasForeignKey("ElectoralCommiteeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartElectionBackend.Models.CommiteeAgreement", b =>
                {
                    b.HasOne("SmartElectionBackend.Models.Election", "Election")
                        .WithMany("CommiteeAgreements")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartElectionBackend.Models.ElectoralCommitee", "ElectoralCommitee")
                        .WithMany("CommiteeAgreements")
                        .HasForeignKey("ElectoralCommiteeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartElectionBackend.Models.Election", b =>
                {
                    b.HasOne("SmartElectionBackend.Models.User", "User")
                        .WithMany("Elections")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SmartElectionBackend.Models.IoT", b =>
                {
                    b.HasOne("SmartElectionBackend.Models.ElectoralCommitee", "ElectoralCommitee")
                        .WithMany("IoTs")
                        .HasForeignKey("ElectoralCommiteeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartElectionBackend.Models.Turnout", b =>
                {
                    b.HasOne("SmartElectionBackend.Models.Election", "Election")
                        .WithMany("Turnouts")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartElectionBackend.Models.ElectoralCommitee", "ElectoralCommitee")
                        .WithMany("Turnouts")
                        .HasForeignKey("ElectoralCommiteeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartElectionBackend.Models.User", "User")
                        .WithMany("Turnouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartElectionBackend.Models.UserCertificates", b =>
                {
                    b.HasOne("SmartElectionBackend.Models.Election", "Election")
                        .WithOne("UserCertificate")
                        .HasForeignKey("SmartElectionBackend.Models.UserCertificates", "ElectionId");

                    b.HasOne("SmartElectionBackend.Models.ElectoralCommitee", "ElectoralCommitee")
                        .WithMany("UserCertificates")
                        .HasForeignKey("ElectoralCommiteeId");

                    b.HasOne("SmartElectionBackend.Models.User", "User")
                        .WithMany("UserCertificates")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SmartElectionBackend.Models.UserFingers", b =>
                {
                    b.HasOne("SmartElectionBackend.Models.IoT", "IoT")
                        .WithMany("UserFingers")
                        .HasForeignKey("IoTId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartElectionBackend.Models.User", "User")
                        .WithMany("UserFingers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
